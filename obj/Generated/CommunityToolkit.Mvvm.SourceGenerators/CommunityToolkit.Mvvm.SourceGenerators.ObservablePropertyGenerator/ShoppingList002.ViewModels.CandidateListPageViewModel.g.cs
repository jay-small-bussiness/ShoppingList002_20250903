// <auto-generated/>
#pragma warning disable
#nullable enable
namespace ShoppingList002.ViewModels
{
    /// <inheritdoc/>
    partial class CandidateListPageViewModel
    {
        /// <inheritdoc cref="isEditMode"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool IsEditMode
        {
            get => isEditMode;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(isEditMode, value))
                {
                    bool __oldValue = isEditMode;
                    OnIsEditModeChanging(value);
                    OnIsEditModeChanging(__oldValue, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.IsEditMode);
                    isEditMode = value;
                    OnIsEditModeChanged(value);
                    OnIsEditModeChanged(__oldValue, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.IsEditMode);
                }
            }
        }

        /// <inheritdoc cref="categoryTitle"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string CategoryTitle
        {
            get => categoryTitle;
            [global::System.Diagnostics.CodeAnalysis.MemberNotNull("categoryTitle")]
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(categoryTitle, value))
                {
                    OnCategoryTitleChanging(value);
                    OnCategoryTitleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.CategoryTitle);
                    categoryTitle = value;
                    OnCategoryTitleChanged(value);
                    OnCategoryTitleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.CategoryTitle);
                }
            }
        }

        /// <inheritdoc cref="categoryTitleWithEmoji"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string CategoryTitleWithEmoji
        {
            get => categoryTitleWithEmoji;
            [global::System.Diagnostics.CodeAnalysis.MemberNotNull("categoryTitleWithEmoji")]
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(categoryTitleWithEmoji, value))
                {
                    OnCategoryTitleWithEmojiChanging(value);
                    OnCategoryTitleWithEmojiChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.CategoryTitleWithEmoji);
                    categoryTitleWithEmoji = value;
                    OnCategoryTitleWithEmojiChanged(value);
                    OnCategoryTitleWithEmojiChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.CategoryTitleWithEmoji);
                }
            }
        }

        /// <inheritdoc cref="colorId"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public int ColorId
        {
            get => colorId;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(colorId, value))
                {
                    OnColorIdChanging(value);
                    OnColorIdChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ColorId);
                    colorId = value;
                    OnColorIdChanged(value);
                    OnColorIdChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ColorId);
                }
            }
        }

        /// <summary>Executes the logic for when <see cref="IsEditMode"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsEditMode"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsEditModeChanging(bool value);
        /// <summary>Executes the logic for when <see cref="IsEditMode"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsEditMode"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsEditModeChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsEditMode"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsEditMode"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsEditModeChanged(bool value);
        /// <summary>Executes the logic for when <see cref="IsEditMode"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsEditMode"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsEditModeChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="CategoryTitle"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CategoryTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleChanging(string value);
        /// <summary>Executes the logic for when <see cref="CategoryTitle"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CategoryTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleChanging(string? oldValue, string newValue);
        /// <summary>Executes the logic for when <see cref="CategoryTitle"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CategoryTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleChanged(string value);
        /// <summary>Executes the logic for when <see cref="CategoryTitle"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CategoryTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleChanged(string? oldValue, string newValue);
        /// <summary>Executes the logic for when <see cref="CategoryTitleWithEmoji"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CategoryTitleWithEmoji"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleWithEmojiChanging(string value);
        /// <summary>Executes the logic for when <see cref="CategoryTitleWithEmoji"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CategoryTitleWithEmoji"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleWithEmojiChanging(string? oldValue, string newValue);
        /// <summary>Executes the logic for when <see cref="CategoryTitleWithEmoji"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CategoryTitleWithEmoji"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleWithEmojiChanged(string value);
        /// <summary>Executes the logic for when <see cref="CategoryTitleWithEmoji"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CategoryTitleWithEmoji"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnCategoryTitleWithEmojiChanged(string? oldValue, string newValue);
        /// <summary>Executes the logic for when <see cref="ColorId"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ColorId"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnColorIdChanging(int value);
        /// <summary>Executes the logic for when <see cref="ColorId"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ColorId"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnColorIdChanging(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="ColorId"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ColorId"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnColorIdChanged(int value);
        /// <summary>Executes the logic for when <see cref="ColorId"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ColorId"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnColorIdChanged(int oldValue, int newValue);
    }
}